<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="#"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:dt="urn:schemas-microsoft-com:datatypes" xmlns:ps="http://graphpad.com/prism/Prism.htm" version="1.0">
	<!--
	XML style sheet template for formatting data and info tables from GraphPad Prism 8.0.
	Copyright 1992-2019 GraphPad Software, Inc.
-->
	<xsl:output method="html" version="4.0" omit-xml-declaration="yes"/>
	<GraphPadPrismFile xmlns="http://graphpad.com/prism/Prism.htm" PrismXMLVersion="5.00">
<Created>
<MostRecentVersion CreatedByProgram="GraphPad Prism" CreatedByVersion="8.1.1.330" Login="Priyal Dass" DateTime="2019-10-22T17:04:26+12:00"/>
</Created>
<InfoSequence>
<Ref ID="Info0" Selected="1"/>
</InfoSequence>
<Info ID="Info0">
<Title>Project info 1</Title>
<Notes/>
<Constant><Name>Experiment Date</Name><Value>2019-10-09</Value></Constant>
<Constant><Name>Experiment ID</Name><Value/></Constant>
<Constant><Name>Notebook ID</Name><Value/></Constant>
<Constant><Name>Project</Name><Value/></Constant>
<Constant><Name>Experimenter</Name><Value/></Constant>
<Constant><Name>Protocol</Name><Value/></Constant>
</Info>

<TableSequence Selected="1">

<Ref ID="Table0" Selected="1"/>
</TableSequence>
<Table ID="Table0" XFormat="none" YFormat="replicates" Replicates="3" TableType="TwoWay" EVFormat="AsteriskAfterNumber">
<Title>Data 1</Title>
<RowTitlesColumn Width="81">
<Subcolumn>
<d>Control</d>
<d>0.1 x IC50</d>
<d>0.25 x IC50</d>
<d>0.5 x IC50</d>
<d>1 x IC50</d>
<d>2.5 x IC50</d>
<d>5 x IC50</d>
</Subcolumn>
</RowTitlesColumn>
<YColumn Width="243" Decimals="5" Subcolumns="3">
<Title>Crizotinib</Title>
<Subcolumn>
<d>100</d>
<d>97.11964</d>
<d>94.92897</d>
<d>58.90464</d>
<d>44.54359</d>
<d>26.36916</d>
<d>14.84786</d>
</Subcolumn>
<Subcolumn>
<d>100</d>
<d>78.68783</d>
<d>72.43654</d>
<d>53.90962</d>
<d>36.20796</d>
<d>9.119041</d>
<d>14.27687</d>
</Subcolumn>
<Subcolumn>
<d>100</d>
<d>98.60931</d>
<d>94.04358</d>
<d>82.68173</d>
<d>57.51773</d>
<d>30.91053</d>
<d>16.50486</d>
</Subcolumn>
</YColumn>
<YColumn Width="243" Decimals="5" Subcolumns="3">
<Title>ABT-737</Title>
<Subcolumn>
<d>100</d>
<d>98.97336</d>
<d>88.50107</d>
<d>98.51134</d>
<d>50.51337</d>
<d>24.74334</d>
<d>20.79057</d>
</Subcolumn>
<Subcolumn>
<d>100</d>
<d>90.29348</d>
<d>87.13321</d>
<d>80.41763</d>
<d>55.16367</d>
<d>13.45937</d>
<d>15.37811</d>
</Subcolumn>
<Subcolumn>
<d>100</d>
<d>88.02573</d>
<d>103.2419</d>
<d>66.44278</d>
<d>55.51988</d>
<d>35.95211</d>
<d>23.16005</d>
</Subcolumn>
</YColumn>
<YColumn Width="243" Decimals="6" Subcolumns="3">
<Title>Combination</Title>
<Subcolumn>
<d>100</d>
<d>68.11699</d>
<d>60.11603</d>
<d>35.55717</d>
<d>22.67343</d>
<d>9.499637</d>
<d>8.774474</d>
</Subcolumn>
<Subcolumn>
<d>100</d>
<d>102.3454</d>
<d>84.84315</d>
<d>73.29229</d>
<d>33.30402</d>
<d>12.63559</d>
<d>11.16974</d>
</Subcolumn>
<Subcolumn>
<d>100</d>
<d>85.9597</d>
<d>95.27585</d>
<d>66.43541</d>
<d>41.88966</d>
<d>11.49653</d>
<d>13.1153</d>
</Subcolumn>
</YColumn>
</Table>

<!--Analyses, graphs and layouts as compressed binary. Don't edit this part of the file.-->

<Template dt:dt="bin.base64">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</Template></GraphPadPrismFile>
	<xsl:template match="ps:Info">
		<a><xsl:attribute name="name"><xsl:value-of select="@ID"/></xsl:attribute></a>
		<table border="0">
			<tr>
				<td><xsl:apply-templates select="ps:Title"/> </td><td width="20"></td><td width="50%"><b>Notes</b></td>
			</tr>
			<tr>
				<td valign="top">
					<table BORDER="1" CELLSPACING="0">
						<tr><th>Constant</th><th>Name</th></tr>
						<xsl:for-each select="ps:Constant">
							<tr>
								<td><xsl:apply-templates select="ps:Name"/> </td>
								<td><xsl:apply-templates select="ps:Value"/> </td>
							</tr>
						</xsl:for-each>
					</table>
				</td>
				<td></td>
				<td valign="top">
					<xsl:apply-templates select="ps:Notes"/>
				</td>
			</tr>
		</table>
	</xsl:template>
	<xsl:template match="ps:GraphPadPrismFile">
		<HTML>
			<BODY>
				<xsl:variable name="Chars" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"/>
				<font color="#999999">
					<p align="center">This file can be opened by <a href="http://www.graphpad.com">GraphPad</a> Prism (version 
	<xsl:value-of select="@PrismXMLVersion"/> or later). </p></font><hr/>
         This file contains <xsl:value-of select="count(ps:Table|ps:HugeTable)"/> data tables and 
	<xsl:value-of select="count(ps:Info)+count(ps:Table|ps:HugeTable/ps:Info)"/> info tables:

	<dir>
					<xsl:for-each select="ps:Info">
						<li>
							<a>
								<xsl:attribute name="href">#<xsl:value-of select="@ID"/></xsl:attribute>
								<xsl:apply-templates select="ps:Title"/>
							</a>
						</li>
					</xsl:for-each>
					<xsl:for-each select="ps:Table|ps:HugeTable">
						<li>
							<a>
								<xsl:attribute name="href">#<xsl:value-of select="@ID"/></xsl:attribute>
								<xsl:apply-templates select="ps:Title"/>
							</a>
							<dir>
								<xsl:for-each select="ps:Info">
									<li>
										<a>
											<xsl:attribute name="href">#<xsl:value-of select="@ID"/></xsl:attribute>
											<xsl:apply-templates select="ps:Title"/>
										</a>
									</li>
								</xsl:for-each>
							</dir>
						</li>
					</xsl:for-each>
				</dir>
				<hr/>
				<xsl:apply-templates select="ps:Info"/>
				<br/>
				<hr/>
				<br/>
				<xsl:for-each select="ps:Table|ps:HugeTable">
					<xsl:apply-templates select="ps:Title"/>
					<a><xsl:attribute name="name"><xsl:value-of select="@ID"/></xsl:attribute></a>
					<xsl:variable name="width" select="100 div count (*/ps:Subcolumn)"/>
					<xsl:variable name="xFormat" select="./@XFormat"/>
					<xsl:variable name="yFormat" select="./@YFormat"/>
					<xsl:variable name="nRepl" select="./@replicates"/>
					<xsl:variable name="isXAdvancedColumn" select="boolean(($xFormat='date' or $xFormat='time' or $xFormat='startenddate') and count(ps:XAdvancedColumn) &gt; 0)"/>
					<xsl:variable name="isXAdvancedSubcol" select="boolean(($xFormat='startenddate') or count(ps:XAdvancedColumn/ps:Subcolumn/ps:Title) &gt; 0)"/>
					<xsl:variable name="isXSubcol" select="boolean(($xFormat='error' or count(ps:XColumn/ps:Subcolumn/ps:Title) &gt; 0) and not ($isXAdvancedColumn))"/>
					<xsl:variable name="isYSubcol" select="boolean(($yFormat='replicates'and ./@Replicates&gt;1) or &#xA;						 ($yFormat!='text'and $yFormat!='replicates') or &#xA;						count(ps:YColumn/ps:Subcolumn/ps:Title)&gt;0)"/>
					<xsl:variable name="isYSubColNameCustom" select="boolean($isYSubcol and count(ps:SubColumnTitles)&gt;0)"/>
					<TABLE BORDER="1" CELLSPACING="0">
						<TR>
							<xsl:for-each select="ps:RowTitlesColumn">
								<TD align="center">
									<xsl:attribute name="rowspan">
										<xsl:if test="$isXSubcol or $isXAdvancedSubcol or $isYSubcol">2</xsl:if>
									</xsl:attribute><BR/>
								</TD>
							</xsl:for-each>
							<xsl:if test="not ($isXAdvancedColumn)">
								<xsl:for-each select="ps:XColumn">
									<TD align="center">
										<xsl:attribute name="rowspan">
											<xsl:if test="$isYSubcol and not($isXSubcol)">2</xsl:if>
										</xsl:attribute>
										<xsl:attribute name="colspan"><xsl:value-of select="./@Subcolumns"/></xsl:attribute>
						 
						<xsl:apply-templates select="ps:Title"/>
										<xsl:if test="count(ps:Title)=0 or ps:Title=''">X-Title</xsl:if>				
						 
					</TD>
								</xsl:for-each>
							</xsl:if>
							<xsl:if test="$isXAdvancedColumn">
								<xsl:for-each select="ps:XAdvancedColumn">
									<TD align="center">
										<xsl:attribute name="rowspan">
											<xsl:if test="$isYSubcol and not($isXAdvancedSubcol)">2</xsl:if>
										</xsl:attribute>
										<xsl:attribute name="colspan"><xsl:value-of select="./@Subcolumns"/></xsl:attribute>
						 
						<xsl:apply-templates select="ps:Title"/>
										<xsl:if test="count(ps:Title)=0 or ps:Title=''">X-Title</xsl:if>				
						 
					</TD>
								</xsl:for-each>
							</xsl:if>
							<xsl:for-each select="ps:YColumn">
								<xsl:variable name="DefColName2" select="(position()-1) mod 26"/>
								<xsl:variable name="DefColName1" select="(position()-1-$DefColName2) div 26"/>
								<TD align="center">
									<xsl:attribute name="colspan"><xsl:value-of select="./@Subcolumns"/></xsl:attribute>
									<xsl:attribute name="rowspan">
										<xsl:if test="($isXSubcol or $isXAdvancedSubcol) and not($isYSubcol)">2</xsl:if>
									</xsl:attribute>
					 
					<xsl:apply-templates select="ps:Title"/>
									<xsl:if test="count(ps:Title)=0 or ps:Title=''">
										<xsl:value-of select="'Data Set-'"/>
										<xsl:if test="$DefColName1 &gt; 0">
											<xsl:value-of select="substring($Chars,$DefColName1,1)"/>
										</xsl:if>
										<xsl:value-of select="substring($Chars,$DefColName2+1,1)"/>
									</xsl:if>
					 				
	   			</TD>
							</xsl:for-each>
						</TR>
						<xsl:if test="$isXSubcol or $isXAdvancedSubcol or $isYSubcol">
							<TR>
								<xsl:if test="$isXSubcol">
									<xsl:for-each select="ps:XColumn">
										<xsl:for-each select="ps:Subcolumn">
											<TD align="center"> 
					 
					<xsl:apply-templates select="ps:Title"/>
												<xsl:if test="count(ps:Title)=0 or ps:Title=''">
													<xsl:choose>
														<xsl:when test="position()=1"><B>X</B></xsl:when>
														<xsl:when test="position()=2"><B>Err.Bar</B></xsl:when>
													</xsl:choose>
												</xsl:if>				
					 
				</TD>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:if>
								<xsl:if test="$isXAdvancedSubcol">
									<xsl:for-each select="ps:XAdvancedColumn">
										<xsl:for-each select="ps:Subcolumn">
											<TD align="center"> 
					 
					<xsl:apply-templates select="ps:Title"/>
												<xsl:if test="count(ps:Title)=0 or ps:Title=''">
													<xsl:choose>
														<xsl:when test="position()=1"><B>Starting Date</B></xsl:when>
														<xsl:when test="position()=2"><B>Ending Date</B></xsl:when>
													</xsl:choose>
												</xsl:if>				
					 
				</TD>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:if>
								<xsl:if test="$isYSubcol">
									<xsl:for-each select="ps:YColumn">
										<xsl:variable name="DefColName2" select="(position()-1) mod 26"/>
										<xsl:variable name="DefColName1" select="(position()-1-$DefColName2) div 26"/>
										<xsl:variable name="YColumnNdx" select="position()"/>
										<xsl:for-each select="ps:Subcolumn">
											<TD align="center">
					 
					<xsl:apply-templates select="ps:Title"/>
												<xsl:if test="count(ps:Title)=0 or ps:Title=''">
													<xsl:if test="$yFormat='replicates' or $yFormat='text'">
														<B>
															<xsl:if test="$DefColName1 &gt; 0">
																<xsl:value-of select="substring($Chars,$DefColName1,1)"/>
															</xsl:if>
															<xsl:choose>
																<xsl:when test="$isYSubColNameCustom">
																	<xsl:variable name="subColCustomNamePos" select="position()"/>
																	<xsl:for-each select="../../ps:SubColumnTitles/ps:Subcolumn">
																		<xsl:if test="position()=$subColCustomNamePos">
																			<xsl:choose>
																				<xsl:when test="../../ps:SubColumnTitles/@OwnSet='1'">
																					<xsl:variable name="DItemsCount" select="count(./ps:d)"/>
																					<xsl:choose>
																						<xsl:when test="$DItemsCount&lt;$YColumnNdx or ./ps:d[$YColumnNdx]=''">
																							<xsl:value-of select="substring($Chars,$DefColName2+1,1)"/>:Y<xsl:value-of select="position()"/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:apply-templates select="./ps:d[$YColumnNdx]"/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="../../ps:SubColumnTitles/@OwnSet='0'">
																					<xsl:variable name="DItemsCount" select="count(./ps:d)"/>
																					<xsl:choose>
																						<xsl:when test="$DItemsCount&lt;1 or ./ps:d[1]=''">
																							<xsl:value-of select="substring($Chars,$DefColName2+1,1)"/>:Y<xsl:value-of select="position()"/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:apply-templates select="./ps:d[1]"/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:apply-templates select="ps:d"/>
																					<xsl:if test="ps:d=''">
																						<xsl:value-of select="substring($Chars,$DefColName2+1,1)"/>:Y<xsl:value-of select="position()"/>
																					</xsl:if>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:if>
																	</xsl:for-each>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:value-of select="substring($Chars,$DefColName2+1,1)"/>:Y<xsl:value-of select="position()"/>
																</xsl:otherwise>
															</xsl:choose>
														</B>
													</xsl:if>
													<xsl:if test="$yFormat!='replicates' and $yFormat!='text'">
														<xsl:if test="not($yFormat='replicates' or $yFormat='text')">
															<xsl:if test="position()=1"><B>Mean</B></xsl:if>
															<xsl:if test="position()!=1">
																<xsl:choose>
																	<xsl:when test="$yFormat='SD'">
																		<B>SD</B>
																	</xsl:when>
																	<xsl:when test="$yFormat='SE'">
																		<B>SEM</B>
																	</xsl:when>
																	<xsl:when test="$yFormat='CV'">
																		<B>%CV</B>
																	</xsl:when>
																	<xsl:when test="$yFormat='SDN'">
																		<xsl:if test="position()=2"><B>SD</B></xsl:if>
																		<xsl:if test="position()=3"><B>N</B></xsl:if>
																	</xsl:when>
																	<xsl:when test="$yFormat='SEN'">
																		<xsl:if test="position()=2"><B>SEM</B></xsl:if>
																		<xsl:if test="position()=3"><B>N</B></xsl:if>
																	</xsl:when>
																	<xsl:when test="$yFormat='CVN'">
																		<xsl:if test="position()=2"><B>%CV</B></xsl:if>
																		<xsl:if test="position()=3"><B>N</B></xsl:if>
																	</xsl:when>
																	<xsl:when test="$yFormat='low-high'">
																		<xsl:if test="position()=2"><B>+Error</B></xsl:if>
																		<xsl:if test="position()=3"><B>-Error</B></xsl:if>
																	</xsl:when>
																	<xsl:when test="$yFormat='upper-lower-limits'">
																		<xsl:if test="position()=2"><B>UpperLimit</B></xsl:if>
																		<xsl:if test="position()=3"><B>LowerLimit</B></xsl:if>
																	</xsl:when>
																</xsl:choose>
															</xsl:if>
														</xsl:if>
													</xsl:if>
												</xsl:if>
					 				
	   			</TD>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:if>
							</TR>
						</xsl:if>
						<TR>
							<xsl:for-each select="ps:RowTitlesColumn/ps:Subcolumn">
								<td valign="top" nowrap="1">
									<xsl:attribute name="width"><xsl:value-of select="$width"/>%</xsl:attribute>
									<xsl:apply-templates select="ps:d"/>
									<xsl:if test="count(ps:d)=0"><br/></xsl:if>
								</td>
							</xsl:for-each>
							<xsl:if test="not($isXAdvancedColumn)">
								<xsl:for-each select="ps:XColumn/ps:Subcolumn">
									<td valign="top" nowrap="1">
										<xsl:attribute name="width"><xsl:value-of select="$width"/>%</xsl:attribute>
										<xsl:apply-templates select="ps:d"/>
										<xsl:if test="count(ps:d)=0"><br/></xsl:if>
									</td>
								</xsl:for-each>
							</xsl:if>
							<xsl:if test="$isXAdvancedColumn">
								<xsl:for-each select="ps:XAdvancedColumn/ps:Subcolumn">
									<td valign="top" nowrap="1">
										<xsl:attribute name="width"><xsl:value-of select="$width"/>%</xsl:attribute>
										<xsl:apply-templates select="ps:d"/>
										<xsl:if test="count(ps:d)=0"><br/></xsl:if>
									</td>
								</xsl:for-each>
							</xsl:if>
							<xsl:for-each select="ps:YColumn/ps:Subcolumn">
								<td valign="top" nowrap="1">
									<xsl:attribute name="width"><xsl:value-of select="$width"/>%</xsl:attribute>
									<xsl:apply-templates select="ps:d"/>
									<xsl:if test="count(ps:d)=0"><br/></xsl:if>
								</td>
							</xsl:for-each>
						</TR>
					</TABLE>
					<br/>
					<xsl:apply-templates select="ps:Info"/>
					<br/>
					<hr/>
					<br/>
				</xsl:for-each>
			</BODY>
		</HTML>
	</xsl:template>
	<!--<xsl:template match="ps:d">
	<xsl:choose>
		<xsl:when test="@Excluded and string-length(text())" >
		    <font color="#0000ee">
	      		<xsl:apply-templates select="node()"/>*		
		    </font>
		</xsl:when>
	    <xsl:otherwise>
			<xsl:apply-templates select="node()"/>
		</xsl:otherwise>
	</xsl:choose>
	<xsl:if test="position()!=last()"><br/></xsl:if>
</xsl:template>-->
	<xsl:template match="ps:d">
		<xsl:choose>
			<xsl:when test="@Excluded and string-length(text())">
				<xsl:choose>
					<xsl:when test="../../../@EVFormat='AsteriskAfterNumber'">
						<font color="#0000ee">
							<xsl:apply-templates select="node()"/>*
						</font>
					</xsl:when>
					<xsl:when test="../../../@EVFormat='Blank'">
					</xsl:when>
					<xsl:otherwise>
						<xsl:apply-templates select="node()"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<xsl:apply-templates select="node()"/>
			</xsl:otherwise>
		</xsl:choose>
		<xsl:if test="position()!=last()"><br/></xsl:if>
	</xsl:template>
	<xsl:template match="ps:Title">
		<b><xsl:apply-templates select="node()"/></b>
	</xsl:template>
	<xsl:template match="node()">
		<xsl:param name="DoNotUseBR" select="0"/>
		<xsl:choose>
			<xsl:when test="name()='BR' and $DoNotUseBR=1">
				<div/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="node()">
						<xsl:with-param name="DoNotUseBR" select="$DoNotUseBR"/>
					</xsl:apply-templates>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="ps:Font">
		<xsl:param name="DoNotUseBR" select="0"/>
		<font>
			<xsl:if test="@Size">
				<xsl:attribute name="STYLE">font-size:<xsl:value-of select="@Size"/>pt</xsl:attribute>
			</xsl:if>
			<xsl:copy-of select="@*"/>
			<xsl:apply-templates select="node()">
				<xsl:with-param name="DoNotUseBR" select="$DoNotUseBR"/>
			</xsl:apply-templates>
		</font>
	</xsl:template>
	<xsl:template match="ps:LineStyles">
		<div>
			<xsl:if test="@align">
				<xsl:attribute name="align"><xsl:value-of select="@align"/></xsl:attribute>
			</xsl:if>
			<xsl:if test="@spacing">
				<xsl:variable name="sp" select="@spacing"/>
				<xsl:attribute name="style">margin-bottom:<xsl:value-of select="(@spacing -100) div 5"/>pt</xsl:attribute>
			</xsl:if>
			<xsl:apply-templates select="node()">
				<xsl:with-param name="DoNotUseBR" select="1"/>
			</xsl:apply-templates>
		</div>
	</xsl:template>
	<xsl:template match="ps:Notes">
		<xsl:apply-templates select="node()">
			<xsl:with-param name="DoNotUseBR" select="1"/>
		</xsl:apply-templates>
	</xsl:template>
	<xsl:template match="/">
		<HTML>
			<BODY>
				<xsl:apply-templates select="//ps:GraphPadPrismFile"/>
			</BODY>
		</HTML>
	</xsl:template>
</xsl:stylesheet>
