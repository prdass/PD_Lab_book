<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="#"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:dt="urn:schemas-microsoft-com:datatypes" xmlns:ps="http://graphpad.com/prism/Prism.htm" version="1.0">
	<!--
	XML style sheet template for formatting data and info tables from GraphPad Prism 8.0.
	Copyright 1992-2019 GraphPad Software, Inc.
-->
	<xsl:output method="html" version="4.0" omit-xml-declaration="yes"/>
	<GraphPadPrismFile xmlns="http://graphpad.com/prism/Prism.htm" PrismXMLVersion="5.00">
<Created>
<MostRecentVersion CreatedByProgram="GraphPad Prism" CreatedByVersion="8.1.1.330" Login="Priyal Dass" DateTime="2020-03-09T10:13:53+12:00"/>
</Created>
<InfoSequence>
<Ref ID="Info0" Selected="1"/>
</InfoSequence>
<Info ID="Info0">
<Title>Project info 1</Title>
<Notes/>
<Constant><Name>Experiment Date</Name><Value>2019-06-25</Value></Constant>
<Constant><Name>Experiment ID</Name><Value/></Constant>
<Constant><Name>Notebook ID</Name><Value/></Constant>
<Constant><Name>Project</Name><Value/></Constant>
<Constant><Name>Experimenter</Name><Value/></Constant>
<Constant><Name>Protocol</Name><Value/></Constant>
</Info>

<TableSequence Selected="1">

<Ref ID="Table0" Selected="1"/>
</TableSequence>
<Table ID="Table0" XFormat="numbers" YFormat="replicates" Replicates="6" TableType="XY" EVFormat="AsteriskAfterNumber">
<Title>Data 1</Title>
<XColumn Width="95" Subcolumns="1" Decimals="6">
<Title/>
<Subcolumn>
<d>0</d>
<d>5e-009</d>
<d>1e-008</d>
<d>5e-008</d>
<d>1e-007</d>
<d>2.5e-007</d>
<d>5e-007</d>
<d>0.000001</d>
<d>0.000005</d>
<d>0.00001</d>
</Subcolumn>
</XColumn>
<XAdvancedColumn Version="1" Width="95" Decimals="6" Subcolumns="1">
<Title/>
<Subcolumn>
<d>0</d>
<d>5e-009</d>
<d>1e-008</d>
<d>5e-008</d>
<d>1e-007</d>
<d>2.5e-007</d>
<d>5e-007</d>
<d>0.000001</d>
<d>0.000005</d>
<d>0.00001</d>
</Subcolumn>
</XAdvancedColumn>
<YColumn Width="486" Decimals="6" Subcolumns="6">
<Title/>
<Subcolumn>
<d Excluded="1">100</d>
<d Excluded="1">93.43201</d>
<d Excluded="1">87.78908</d>
<d Excluded="1">65.00925</d>
<d Excluded="1">17.11378</d>
<d Excluded="1">83.32562</d>
<d Excluded="1">15.20583</d>
<d Excluded="1">13.13599</d>
<d Excluded="1">11.05458</d>
<d Excluded="1">9.458834</d>
</Subcolumn>
<Subcolumn>
<d>100</d>
<d>80.47337</d>
<d>67.45562</d>
<d>54.50362</d>
<d>41.88034</d>
<d>22.02498</d>
<d>18.54043</d>
<d>19.98685</d>
<d>19.65812</d>
<d>15.77909</d>
</Subcolumn>
<Subcolumn>
<d>100</d>
<d>94.54855</d>
<d>90.7439</d>
<d>80.57922</d>
<d>58.54628</d>
<d>24.13401</d>
<d>19.08007</d>
<d>18.17149</d>
<d>18.90971</d>
<d>15.55934</d>
</Subcolumn>
<Subcolumn>
<d>100</d>
<d>97.51188</d>
<d>92.80216</d>
<d>78.3768</d>
<d>60.66353</d>
<d>25.53318</d>
<d>15.31399</d>
<d>12.97394</d>
<d>9.212088</d>
<d>7.55332</d>
</Subcolumn>
<Subcolumn>
<d>100</d>
<d>91.73219</d>
<d>102.9865</d>
<d>63.59637</d>
<d>82.11257</d>
<d>29.70765</d>
<d>13.01478</d>
<d>13.95788</d>
<d>9.619619</d>
<d>10.81421</d>
</Subcolumn>
<Subcolumn>
<d/>
<d/>
<d/>
<d/>
<d/>
<d/>
<d/>
<d/>
<d/>
<d/>
</Subcolumn>
</YColumn>
</Table>

<!--Analyses, graphs and layouts as compressed binary. Don't edit this part of the file.-->

<Template dt:dt="bin.base64">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
t2vf2d8/Lv65c5vuFDgVB2ZH/fLxrN+evS1591upo1atG/iYZetPdWln895TZVccMc71rjj6
J7XizOunWp17OG7wU2NmPe0yvXI4oebIkcpHZnZ/4LX3tg15dftnCXcMKDmae3gTfc5Nqcc5
nnkrqtfYLrFPjXrnhz1bdvabOaP/R+u+qWZyY/fevvWuIb1Hf/3v6fYZmQntphx7a4Zr3vqC
LqOPxRb8an6gdPWKz3au2j3097uPpJiers7YOWXdvY+91Gfczz99rHoxr+L4e+Ype1sbH9+/
4eyW+cty1h7pvWnMx/uXtbkx983+SxbPHDxd42g/0l09fZV74euXYhyfFJly7v37lF9zXhx7
9vlh5y58F/u5dWRq9+LoHwfPefdUNVKtNuz7uz5bpE49XTxxTfpezW3p/14ev8nlXLn6wTse
jy5MfeYGS8Z1w/a+ndD7M936u/vfcVvSplWj//JVcW7PD9679Od32f+84aMlnue7LX7twp7v
9g84qPOse0v32bAuY3LX/TF53VvrTK6EQ8Wdx3z9Q7dfir/tNuHC14/ceDFpYHXOsHHvj78Q
s+eJ9++d+PTwhdu+1T5357Jvbn3D9mzHztMzq+YvHfTq5+rP8//2z57bH0lNffyDVV88tXz5
mQmx2+ZSB7KK3uD0rqV7adyVkJxndoX7bmdhJeMqK3YHVLkmNa9xsKM/XuVaVzwzUTKlLNI5
hJMh5yTBw59DutqnsaKX4v1TNIks+uFUl4+oaVZ+9ihj3zZsVrmzwjXNWVaJ1Oc5gZudK9J6
de+eZkvtC7joFBs9Wh49ayiMzJaIi0SzkZBs31h3pbPA7b7HL4qKjaIT+488WM0Gm2WvcVbI
42jYOHoui0p3obtUHq5lw1kP7P8QO9/jqkfkJeOdw4cHKdWbOLOm21VeO/BX+hUuUPb/AwAA
//8DAIlEU4I=</Template></GraphPadPrismFile>
	<xsl:template match="ps:Info">
		<a><xsl:attribute name="name"><xsl:value-of select="@ID"/></xsl:attribute></a>
		<table border="0">
			<tr>
				<td><xsl:apply-templates select="ps:Title"/> </td><td width="20"></td><td width="50%"><b>Notes</b></td>
			</tr>
			<tr>
				<td valign="top">
					<table BORDER="1" CELLSPACING="0">
						<tr><th>Constant</th><th>Name</th></tr>
						<xsl:for-each select="ps:Constant">
							<tr>
								<td><xsl:apply-templates select="ps:Name"/> </td>
								<td><xsl:apply-templates select="ps:Value"/> </td>
							</tr>
						</xsl:for-each>
					</table>
				</td>
				<td></td>
				<td valign="top">
					<xsl:apply-templates select="ps:Notes"/>
				</td>
			</tr>
		</table>
	</xsl:template>
	<xsl:template match="ps:GraphPadPrismFile">
		<HTML>
			<BODY>
				<xsl:variable name="Chars" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"/>
				<font color="#999999">
					<p align="center">This file can be opened by <a href="http://www.graphpad.com">GraphPad</a> Prism (version 
	<xsl:value-of select="@PrismXMLVersion"/> or later). </p></font><hr/>
         This file contains <xsl:value-of select="count(ps:Table|ps:HugeTable)"/> data tables and 
	<xsl:value-of select="count(ps:Info)+count(ps:Table|ps:HugeTable/ps:Info)"/> info tables:

	<dir>
					<xsl:for-each select="ps:Info">
						<li>
							<a>
								<xsl:attribute name="href">#<xsl:value-of select="@ID"/></xsl:attribute>
								<xsl:apply-templates select="ps:Title"/>
							</a>
						</li>
					</xsl:for-each>
					<xsl:for-each select="ps:Table|ps:HugeTable">
						<li>
							<a>
								<xsl:attribute name="href">#<xsl:value-of select="@ID"/></xsl:attribute>
								<xsl:apply-templates select="ps:Title"/>
							</a>
							<dir>
								<xsl:for-each select="ps:Info">
									<li>
										<a>
											<xsl:attribute name="href">#<xsl:value-of select="@ID"/></xsl:attribute>
											<xsl:apply-templates select="ps:Title"/>
										</a>
									</li>
								</xsl:for-each>
							</dir>
						</li>
					</xsl:for-each>
				</dir>
				<hr/>
				<xsl:apply-templates select="ps:Info"/>
				<br/>
				<hr/>
				<br/>
				<xsl:for-each select="ps:Table|ps:HugeTable">
					<xsl:apply-templates select="ps:Title"/>
					<a><xsl:attribute name="name"><xsl:value-of select="@ID"/></xsl:attribute></a>
					<xsl:variable name="width" select="100 div count (*/ps:Subcolumn)"/>
					<xsl:variable name="xFormat" select="./@XFormat"/>
					<xsl:variable name="yFormat" select="./@YFormat"/>
					<xsl:variable name="nRepl" select="./@replicates"/>
					<xsl:variable name="isXAdvancedColumn" select="boolean(($xFormat='date' or $xFormat='time' or $xFormat='startenddate') and count(ps:XAdvancedColumn) &gt; 0)"/>
					<xsl:variable name="isXAdvancedSubcol" select="boolean(($xFormat='startenddate') or count(ps:XAdvancedColumn/ps:Subcolumn/ps:Title) &gt; 0)"/>
					<xsl:variable name="isXSubcol" select="boolean(($xFormat='error' or count(ps:XColumn/ps:Subcolumn/ps:Title) &gt; 0) and not ($isXAdvancedColumn))"/>
					<xsl:variable name="isYSubcol" select="boolean(($yFormat='replicates'and ./@Replicates&gt;1) or &#xA;						 ($yFormat!='text'and $yFormat!='replicates') or &#xA;						count(ps:YColumn/ps:Subcolumn/ps:Title)&gt;0)"/>
					<xsl:variable name="isYSubColNameCustom" select="boolean($isYSubcol and count(ps:SubColumnTitles)&gt;0)"/>
					<TABLE BORDER="1" CELLSPACING="0">
						<TR>
							<xsl:for-each select="ps:RowTitlesColumn">
								<TD align="center">
									<xsl:attribute name="rowspan">
										<xsl:if test="$isXSubcol or $isXAdvancedSubcol or $isYSubcol">2</xsl:if>
									</xsl:attribute><BR/>
								</TD>
							</xsl:for-each>
							<xsl:if test="not ($isXAdvancedColumn)">
								<xsl:for-each select="ps:XColumn">
									<TD align="center">
										<xsl:attribute name="rowspan">
											<xsl:if test="$isYSubcol and not($isXSubcol)">2</xsl:if>
										</xsl:attribute>
										<xsl:attribute name="colspan"><xsl:value-of select="./@Subcolumns"/></xsl:attribute>
						 
						<xsl:apply-templates select="ps:Title"/>
										<xsl:if test="count(ps:Title)=0 or ps:Title=''">X-Title</xsl:if>				
						 
					</TD>
								</xsl:for-each>
							</xsl:if>
							<xsl:if test="$isXAdvancedColumn">
								<xsl:for-each select="ps:XAdvancedColumn">
									<TD align="center">
										<xsl:attribute name="rowspan">
											<xsl:if test="$isYSubcol and not($isXAdvancedSubcol)">2</xsl:if>
										</xsl:attribute>
										<xsl:attribute name="colspan"><xsl:value-of select="./@Subcolumns"/></xsl:attribute>
						 
						<xsl:apply-templates select="ps:Title"/>
										<xsl:if test="count(ps:Title)=0 or ps:Title=''">X-Title</xsl:if>				
						 
					</TD>
								</xsl:for-each>
							</xsl:if>
							<xsl:for-each select="ps:YColumn">
								<xsl:variable name="DefColName2" select="(position()-1) mod 26"/>
								<xsl:variable name="DefColName1" select="(position()-1-$DefColName2) div 26"/>
								<TD align="center">
									<xsl:attribute name="colspan"><xsl:value-of select="./@Subcolumns"/></xsl:attribute>
									<xsl:attribute name="rowspan">
										<xsl:if test="($isXSubcol or $isXAdvancedSubcol) and not($isYSubcol)">2</xsl:if>
									</xsl:attribute>
					 
					<xsl:apply-templates select="ps:Title"/>
									<xsl:if test="count(ps:Title)=0 or ps:Title=''">
										<xsl:value-of select="'Data Set-'"/>
										<xsl:if test="$DefColName1 &gt; 0">
											<xsl:value-of select="substring($Chars,$DefColName1,1)"/>
										</xsl:if>
										<xsl:value-of select="substring($Chars,$DefColName2+1,1)"/>
									</xsl:if>
					 				
	   			</TD>
							</xsl:for-each>
						</TR>
						<xsl:if test="$isXSubcol or $isXAdvancedSubcol or $isYSubcol">
							<TR>
								<xsl:if test="$isXSubcol">
									<xsl:for-each select="ps:XColumn">
										<xsl:for-each select="ps:Subcolumn">
											<TD align="center"> 
					 
					<xsl:apply-templates select="ps:Title"/>
												<xsl:if test="count(ps:Title)=0 or ps:Title=''">
													<xsl:choose>
														<xsl:when test="position()=1"><B>X</B></xsl:when>
														<xsl:when test="position()=2"><B>Err.Bar</B></xsl:when>
													</xsl:choose>
												</xsl:if>				
					 
				</TD>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:if>
								<xsl:if test="$isXAdvancedSubcol">
									<xsl:for-each select="ps:XAdvancedColumn">
										<xsl:for-each select="ps:Subcolumn">
											<TD align="center"> 
					 
					<xsl:apply-templates select="ps:Title"/>
												<xsl:if test="count(ps:Title)=0 or ps:Title=''">
													<xsl:choose>
														<xsl:when test="position()=1"><B>Starting Date</B></xsl:when>
														<xsl:when test="position()=2"><B>Ending Date</B></xsl:when>
													</xsl:choose>
												</xsl:if>				
					 
				</TD>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:if>
								<xsl:if test="$isYSubcol">
									<xsl:for-each select="ps:YColumn">
										<xsl:variable name="DefColName2" select="(position()-1) mod 26"/>
										<xsl:variable name="DefColName1" select="(position()-1-$DefColName2) div 26"/>
										<xsl:variable name="YColumnNdx" select="position()"/>
										<xsl:for-each select="ps:Subcolumn">
											<TD align="center">
					 
					<xsl:apply-templates select="ps:Title"/>
												<xsl:if test="count(ps:Title)=0 or ps:Title=''">
													<xsl:if test="$yFormat='replicates' or $yFormat='text'">
														<B>
															<xsl:if test="$DefColName1 &gt; 0">
																<xsl:value-of select="substring($Chars,$DefColName1,1)"/>
															</xsl:if>
															<xsl:choose>
																<xsl:when test="$isYSubColNameCustom">
																	<xsl:variable name="subColCustomNamePos" select="position()"/>
																	<xsl:for-each select="../../ps:SubColumnTitles/ps:Subcolumn">
																		<xsl:if test="position()=$subColCustomNamePos">
																			<xsl:choose>
																				<xsl:when test="../../ps:SubColumnTitles/@OwnSet='1'">
																					<xsl:variable name="DItemsCount" select="count(./ps:d)"/>
																					<xsl:choose>
																						<xsl:when test="$DItemsCount&lt;$YColumnNdx or ./ps:d[$YColumnNdx]=''">
																							<xsl:value-of select="substring($Chars,$DefColName2+1,1)"/>:Y<xsl:value-of select="position()"/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:apply-templates select="./ps:d[$YColumnNdx]"/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:when test="../../ps:SubColumnTitles/@OwnSet='0'">
																					<xsl:variable name="DItemsCount" select="count(./ps:d)"/>
																					<xsl:choose>
																						<xsl:when test="$DItemsCount&lt;1 or ./ps:d[1]=''">
																							<xsl:value-of select="substring($Chars,$DefColName2+1,1)"/>:Y<xsl:value-of select="position()"/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:apply-templates select="./ps:d[1]"/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:apply-templates select="ps:d"/>
																					<xsl:if test="ps:d=''">
																						<xsl:value-of select="substring($Chars,$DefColName2+1,1)"/>:Y<xsl:value-of select="position()"/>
																					</xsl:if>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:if>
																	</xsl:for-each>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:value-of select="substring($Chars,$DefColName2+1,1)"/>:Y<xsl:value-of select="position()"/>
																</xsl:otherwise>
															</xsl:choose>
														</B>
													</xsl:if>
													<xsl:if test="$yFormat!='replicates' and $yFormat!='text'">
														<xsl:if test="not($yFormat='replicates' or $yFormat='text')">
															<xsl:if test="position()=1"><B>Mean</B></xsl:if>
															<xsl:if test="position()!=1">
																<xsl:choose>
																	<xsl:when test="$yFormat='SD'">
																		<B>SD</B>
																	</xsl:when>
																	<xsl:when test="$yFormat='SE'">
																		<B>SEM</B>
																	</xsl:when>
																	<xsl:when test="$yFormat='CV'">
																		<B>%CV</B>
																	</xsl:when>
																	<xsl:when test="$yFormat='SDN'">
																		<xsl:if test="position()=2"><B>SD</B></xsl:if>
																		<xsl:if test="position()=3"><B>N</B></xsl:if>
																	</xsl:when>
																	<xsl:when test="$yFormat='SEN'">
																		<xsl:if test="position()=2"><B>SEM</B></xsl:if>
																		<xsl:if test="position()=3"><B>N</B></xsl:if>
																	</xsl:when>
																	<xsl:when test="$yFormat='CVN'">
																		<xsl:if test="position()=2"><B>%CV</B></xsl:if>
																		<xsl:if test="position()=3"><B>N</B></xsl:if>
																	</xsl:when>
																	<xsl:when test="$yFormat='low-high'">
																		<xsl:if test="position()=2"><B>+Error</B></xsl:if>
																		<xsl:if test="position()=3"><B>-Error</B></xsl:if>
																	</xsl:when>
																	<xsl:when test="$yFormat='upper-lower-limits'">
																		<xsl:if test="position()=2"><B>UpperLimit</B></xsl:if>
																		<xsl:if test="position()=3"><B>LowerLimit</B></xsl:if>
																	</xsl:when>
																</xsl:choose>
															</xsl:if>
														</xsl:if>
													</xsl:if>
												</xsl:if>
					 				
	   			</TD>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:if>
							</TR>
						</xsl:if>
						<TR>
							<xsl:for-each select="ps:RowTitlesColumn/ps:Subcolumn">
								<td valign="top" nowrap="1">
									<xsl:attribute name="width"><xsl:value-of select="$width"/>%</xsl:attribute>
									<xsl:apply-templates select="ps:d"/>
									<xsl:if test="count(ps:d)=0"><br/></xsl:if>
								</td>
							</xsl:for-each>
							<xsl:if test="not($isXAdvancedColumn)">
								<xsl:for-each select="ps:XColumn/ps:Subcolumn">
									<td valign="top" nowrap="1">
										<xsl:attribute name="width"><xsl:value-of select="$width"/>%</xsl:attribute>
										<xsl:apply-templates select="ps:d"/>
										<xsl:if test="count(ps:d)=0"><br/></xsl:if>
									</td>
								</xsl:for-each>
							</xsl:if>
							<xsl:if test="$isXAdvancedColumn">
								<xsl:for-each select="ps:XAdvancedColumn/ps:Subcolumn">
									<td valign="top" nowrap="1">
										<xsl:attribute name="width"><xsl:value-of select="$width"/>%</xsl:attribute>
										<xsl:apply-templates select="ps:d"/>
										<xsl:if test="count(ps:d)=0"><br/></xsl:if>
									</td>
								</xsl:for-each>
							</xsl:if>
							<xsl:for-each select="ps:YColumn/ps:Subcolumn">
								<td valign="top" nowrap="1">
									<xsl:attribute name="width"><xsl:value-of select="$width"/>%</xsl:attribute>
									<xsl:apply-templates select="ps:d"/>
									<xsl:if test="count(ps:d)=0"><br/></xsl:if>
								</td>
							</xsl:for-each>
						</TR>
					</TABLE>
					<br/>
					<xsl:apply-templates select="ps:Info"/>
					<br/>
					<hr/>
					<br/>
				</xsl:for-each>
			</BODY>
		</HTML>
	</xsl:template>
	<!--<xsl:template match="ps:d">
	<xsl:choose>
		<xsl:when test="@Excluded and string-length(text())" >
		    <font color="#0000ee">
	      		<xsl:apply-templates select="node()"/>*		
		    </font>
		</xsl:when>
	    <xsl:otherwise>
			<xsl:apply-templates select="node()"/>
		</xsl:otherwise>
	</xsl:choose>
	<xsl:if test="position()!=last()"><br/></xsl:if>
</xsl:template>-->
	<xsl:template match="ps:d">
		<xsl:choose>
			<xsl:when test="@Excluded and string-length(text())">
				<xsl:choose>
					<xsl:when test="../../../@EVFormat='AsteriskAfterNumber'">
						<font color="#0000ee">
							<xsl:apply-templates select="node()"/>*
						</font>
					</xsl:when>
					<xsl:when test="../../../@EVFormat='Blank'">
					</xsl:when>
					<xsl:otherwise>
						<xsl:apply-templates select="node()"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<xsl:apply-templates select="node()"/>
			</xsl:otherwise>
		</xsl:choose>
		<xsl:if test="position()!=last()"><br/></xsl:if>
	</xsl:template>
	<xsl:template match="ps:Title">
		<b><xsl:apply-templates select="node()"/></b>
	</xsl:template>
	<xsl:template match="node()">
		<xsl:param name="DoNotUseBR" select="0"/>
		<xsl:choose>
			<xsl:when test="name()='BR' and $DoNotUseBR=1">
				<div/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="node()">
						<xsl:with-param name="DoNotUseBR" select="$DoNotUseBR"/>
					</xsl:apply-templates>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="ps:Font">
		<xsl:param name="DoNotUseBR" select="0"/>
		<font>
			<xsl:if test="@Size">
				<xsl:attribute name="STYLE">font-size:<xsl:value-of select="@Size"/>pt</xsl:attribute>
			</xsl:if>
			<xsl:copy-of select="@*"/>
			<xsl:apply-templates select="node()">
				<xsl:with-param name="DoNotUseBR" select="$DoNotUseBR"/>
			</xsl:apply-templates>
		</font>
	</xsl:template>
	<xsl:template match="ps:LineStyles">
		<div>
			<xsl:if test="@align">
				<xsl:attribute name="align"><xsl:value-of select="@align"/></xsl:attribute>
			</xsl:if>
			<xsl:if test="@spacing">
				<xsl:variable name="sp" select="@spacing"/>
				<xsl:attribute name="style">margin-bottom:<xsl:value-of select="(@spacing -100) div 5"/>pt</xsl:attribute>
			</xsl:if>
			<xsl:apply-templates select="node()">
				<xsl:with-param name="DoNotUseBR" select="1"/>
			</xsl:apply-templates>
		</div>
	</xsl:template>
	<xsl:template match="ps:Notes">
		<xsl:apply-templates select="node()">
			<xsl:with-param name="DoNotUseBR" select="1"/>
		</xsl:apply-templates>
	</xsl:template>
	<xsl:template match="/">
		<HTML>
			<BODY>
				<xsl:apply-templates select="//ps:GraphPadPrismFile"/>
			</BODY>
		</HTML>
	</xsl:template>
</xsl:stylesheet>
